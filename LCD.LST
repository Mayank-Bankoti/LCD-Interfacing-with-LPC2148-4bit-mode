ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 1   


ARM COMPILER V2.40a, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe LCD.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "lpc214x.h"
    2          #include "LCD.h"
    3          
    4          void Delay(unsigned int time)
    5          {
    6   1      unsigned int i, j;
    7   1      for(i=0; i<time; i++)
    8   1          for(j-=0; j<1000; j++);
    9   1      }
   10          
   11          void lcd_init (void)
   12          {
   13   1      
   14   1          Delay(100);
   15   1          lcd_send_cmd(0x02);
   16   1          Delay(100);
   17   1          lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
   18   1          Delay(100);
   19   1          lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
   20   1          Delay(100);
   21   1          lcd_send_cmd(0x01);  // clear display
   22   1          Delay(100);
   23   1          lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
   24   1          Delay(100);
   25   1          lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
   26   1          Delay(100);
   27   1      }
   28          
   29          
   30          void send_to_lcd(char data, int rs)
   31          {
   32   1          // Set or clear RS pin (P0.11) based on the 'rs' parameter
   33   1          if (rs == 1)
   34   1          {
   35   2              IOSET0 |= (1 << 11);  // Set RS (Register Select) pin
   36   2              //IOCLR0 |= (   1<< 20);
   37   2              Delay(1000);
   38   2          }
   39   1          else
   40   1          {
   41   2              IOCLR0 |= (1 << 11);  // Clear RS (Register Select) pin
   42   2          //  IOCLR0 |= ( 1<< 20);
   43   2              Delay(1000);
   44   2          }
   45   1      
   46   1          // Set data pins (P1.20 to P1.23) with the lower 4 bits of 'data'
   47   1          IOCLR1 |= 0xF << 20;    // Clear data pins (P1.20 to P1.23)
   48   1          IOSET1 |= ((data) << 20);  // Set data pins with the lower 4 bits of 'data'
   49   1      
   50   1          // Toggle EN (Enable) pin (P0.20) to send the data
   51   1          IOSET0 |= (1 << 10);  // Set EN (Enable) pin
   52   1          Delay(1000);            // Delay for a short duration
   53   1          IOCLR0 |= (1 << 10);  // Clear EN (Enable) pin to finish sending
   54   1          Delay(1000);            // Delay for a short duration
   55   1      }
   56          
   57          
   58          
   59          void lcd_send_cmd(unsigned char cmd)
ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 2   

   60          {
   61   1          
   62   1          char datatosend;
   63   1          //Send Upper nibble firsr
   64   1          datatosend = ((cmd>>4) & 0x0F);
   65   1          send_to_lcd(datatosend,0);
   66   1      
   67   1          // Send lower nibble
   68   1          datatosend = ((cmd) & 0x0F);
   69   1          send_to_lcd(datatosend,0); 
   70   1      }
   71          
   72          
   73          void lcd_send_data(unsigned char data)
   74          {
   75   1          char datatosend;
   76   1          
   77   1          //Send the higher nibble first
   78   1          datatosend = ((data >>4) & 0x0F);
   79   1          send_to_lcd(datatosend,1);
   80   1      
   81   1          //send lower nibble
   82   1          datatosend = data & (0x0F);
   83   1          send_to_lcd(datatosend,1);
   84   1      
   85   1      }
   86          
   87          //void lcd_clear (void)
   88          //{
   89          //  lcd_send_cmd(0x01);
   90          //  HAL_Delay(2);
   91          //}
   92          
   93          void lcd_put_cur(int row, int col)
   94          {
   95   1          switch (row)
   96   1          {
   97   2              case 0:
   98   2                  col |= 0x80;
   99   2                  break;
  100   2              case 1:
  101   2                  col |= 0xC0;
  102   2                  break;
  103   2          }
  104   1      
  105   1          lcd_send_cmd (col);
  106   1      }
  107          
  108          
  109          
  110          void lcd_send_string (char *str)
  111          {
  112   1          while (*str) lcd_send_data (*str++);
  113   1      }
ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** PUBLICS:
 PUBLIC         Delay?T
 PUBLIC         lcd_send_cmd?T
 PUBLIC         lcd_init?T
 PUBLIC         send_to_lcd?T
 PUBLIC         lcd_send_data?T
 PUBLIC         lcd_put_cur?T
 PUBLIC         lcd_send_string?T



*** CODE SEGMENT '?PR?Delay?T?LCD':
    4: void Delay(unsigned int time)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'time' assigned to Register 'R0' ----
 00000002  ---- Variable 'j' assigned to Register 'R1' ----
    5: {
 00000002            ; SCOPE-START
    7: for(i=0; i<time; i++)
 00000002  2200      MOV         R2,#0x0
 00000004  ---- Variable 'i' assigned to Register 'R2' ----
 00000004  E006      B           L_3  ; T=0x00000014
    8:     for(j-=0; j<1000; j++);
 00000006          L_10:
 00000006  E000      B           L_8  ; T=0x0000000A
 00000008          L_6:
 00000008  3101      ADD         R1,#0x1
 0000000A          L_8:
 0000000A  1C0B      MOV         R3,R1 ; j
 0000000C  4CFA      LDR         R4,=0x3E8
 0000000E  42A3      CMP         R3,R4 ; j
 00000010  D3FA      BCC         L_6  ; T=0x00000008
 00000012  3201      ADD         R2,#0x1
 00000014          L_3:
 00000014  1C04      MOV         R4,R0 ; time
 00000016  1C13      MOV         R3,R2 ; i
 00000018  42A3      CMP         R3,R4 ; i
 0000001A  D3F4      BCC         L_10  ; T=0x00000006
 0000001C            ; SCOPE-END
    9: }
 0000001C  BC10      POP         {R4}
 0000001E  4770      BX          R14
 00000020          ENDP ; 'Delay?T'


*** CODE SEGMENT '?PR?lcd_init?T?LCD':
   11: void lcd_init (void)
 00000000  B500      PUSH        {LR}
   14:     Delay(100);
 00000002  2064      MOV         R0,#0x64
 00000004  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000006  FFFC      BL          Delay?T  ; T=0x0001  (2)
   15:     lcd_send_cmd(0x02);
 00000008  2002      MOV         R0,#0x2
 0000000A  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          lcd_send_cmd?T  ; T=0x0001  (2)
   16:     Delay(100);
 0000000E  2064      MOV         R0,#0x64
 00000010  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000012  FFF6      BL          Delay?T  ; T=0x0001  (2)
   17:     lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 00000014  2028      MOV         R0,#0x28
 00000016  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 00000018  FFF3      BL          lcd_send_cmd?T  ; T=0x0001  (2)
   18:     Delay(100);
 0000001A  2064      MOV         R0,#0x64
 0000001C  F7FF      BL          Delay?T  ; T=0x0001  (1)
ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 4   

 0000001E  FFF0      BL          Delay?T  ; T=0x0001  (2)
   19:     lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 00000020  2008      MOV         R0,#0x8
 00000022  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_send_cmd?T  ; T=0x0001  (2)
   20:     Delay(100);
 00000026  2064      MOV         R0,#0x64
 00000028  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          Delay?T  ; T=0x0001  (2)
   21:     lcd_send_cmd(0x01);  // clear display
 0000002C  2001      MOV         R0,#0x1
 0000002E  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 00000030  FFE7      BL          lcd_send_cmd?T  ; T=0x0001  (2)
   22:     Delay(100);
 00000032  2064      MOV         R0,#0x64
 00000034  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000036  FFE4      BL          Delay?T  ; T=0x0001  (2)
   23:     lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 00000038  2006      MOV         R0,#0x6
 0000003A  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          lcd_send_cmd?T  ; T=0x0001  (2)
   24:     Delay(100);
 0000003E  2064      MOV         R0,#0x64
 00000040  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000042  FFDE      BL          Delay?T  ; T=0x0001  (2)
   25:     lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 00000044  200C      MOV         R0,#0xC
 00000046  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 00000048  FFDB      BL          lcd_send_cmd?T  ; T=0x0001  (2)
   26:     Delay(100);
 0000004A  2064      MOV         R0,#0x64
 0000004C  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          Delay?T  ; T=0x0001  (2)
   27: }
 00000050  BC08      POP         {R3}
 00000052  4718      BX          R3
 00000054          ENDP ; 'lcd_init?T'


*** CODE SEGMENT '?PR?send_to_lcd?T?LCD':
   30: void send_to_lcd(char data, int rs)
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'rs' assigned to Register 'R1' ----
 00000002  1C04      MOV         R4,R0 ; data
 00000004  ---- Variable 'data' assigned to Register 'R4' ----
   33:     if (rs == 1)
 00000004  1C08      MOV         R0,R1 ; rs
 00000006  2801      CMP         R0,#0x1 ; rs
 00000008  D108      BNE         L_11  ; T=0x0000001C
   35:         IOSET0 |= (1 << 11);  // Set RS (Register Select) pin
 0000000A  4800      LDR         R2,=0x800
 0000000C  4800      LDR         R0,=0xE0028004
 0000000E  6801      LDR         R1,[R0,#0x0]
 00000010  4311      ORR         R1,R2
 00000012  6001      STR         R1,[R0,#0x0]
   37:         Delay(1000);
 00000014  48FA      LDR         R0,=0x3E8
 00000016  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          Delay?T  ; T=0x0001  (2)
   38:     }
 0000001A  E007      B           L_12  ; T=0x0000002C
 0000001C          L_11:
   41:         IOCLR0 |= (1 << 11);  // Clear RS (Register Select) pin
 0000001C  4800      LDR         R2,=0x800
 0000001E  4800      LDR         R0,=0xE002800C
 00000020  6801      LDR         R1,[R0,#0x0]
 00000022  4311      ORR         R1,R2
 00000024  6001      STR         R1,[R0,#0x0]
ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 5   

   43:         Delay(1000);
 00000026  48FA      LDR         R0,=0x3E8
 00000028  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          Delay?T  ; T=0x0001  (2)
   44:     }
 0000002C          L_12:
   47:     IOCLR1 |= 0xF << 20;    // Clear data pins (P1.20 to P1.23)
 0000002C  4800      LDR         R2,=0xF00000
 0000002E  4800      LDR         R0,=0xE002801C
 00000030  6801      LDR         R1,[R0,#0x0]
 00000032  4311      ORR         R1,R2
 00000034  6001      STR         R1,[R0,#0x0]
   48:     IOSET1 |= ((data) << 20);  // Set data pins with the lower 4 bits of 'data'
 00000036  1C20      MOV         R0,R4 ; data
 00000038  0602      LSL         R2,R0,#0x18 ; data
 0000003A  0E12      LSR         R2,R2,#0x18
 0000003C  0512      LSL         R2,R2,#0x14
 0000003E  4800      LDR         R0,=0xE0028014
 00000040  6801      LDR         R1,[R0,#0x0]
 00000042  4311      ORR         R1,R2
 00000044  6001      STR         R1,[R0,#0x0]
   51:     IOSET0 |= (1 << 10);  // Set EN (Enable) pin
 00000046  4800      LDR         R2,=0x400
 00000048  4800      LDR         R0,=0xE0028004
 0000004A  6801      LDR         R1,[R0,#0x0]
 0000004C  4311      ORR         R1,R2
 0000004E  6001      STR         R1,[R0,#0x0]
   52:     Delay(1000);            // Delay for a short duration
 00000050  48FA      LDR         R0,=0x3E8
 00000052  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000054  FFD5      BL          Delay?T  ; T=0x0001  (2)
   53:     IOCLR0 |= (1 << 10);  // Clear EN (Enable) pin to finish sending
 00000056  4800      LDR         R2,=0x400
 00000058  4800      LDR         R0,=0xE002800C
 0000005A  6801      LDR         R1,[R0,#0x0]
 0000005C  4311      ORR         R1,R2
 0000005E  6001      STR         R1,[R0,#0x0]
   54:     Delay(1000);            // Delay for a short duration
 00000060  48FA      LDR         R0,=0x3E8
 00000062  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000064  FFCD      BL          Delay?T  ; T=0x0001  (2)
   55: }
 00000066  BC10      POP         {R4}
 00000068  BC08      POP         {R3}
 0000006A  4718      BX          R3
 0000006C          ENDP ; 'send_to_lcd?T'


*** CODE SEGMENT '?PR?lcd_send_cmd?T?LCD':
   59: void lcd_send_cmd(unsigned char cmd)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; cmd
 00000004  ---- Variable 'cmd' assigned to Register 'R5' ----
   60: {
 00000004            ; SCOPE-START
   64:     datatosend = ((cmd>>4) & 0x0F);
 00000004  1C28      MOV         R0,R5 ; cmd
 00000006  0604      LSL         R4,R0,#0x18 ; cmd
 00000008  0E24      LSR         R4,R4,#0x18
 0000000A  0924      LSR         R4,R4,#0x4
 0000000C  200F      MOV         R0,#0xF
 0000000E  4004      AND         R4,R0
 00000010  ---- Variable 'datatosend' assigned to Register 'R4' ----
   65:     send_to_lcd(datatosend,0);
 00000010  1C20      MOV         R0,R4 ; datatosend
 00000012  0600      LSL         R0,R0,#0x18 ; datatosend
 00000014  0E00      LSR         R0,R0,#0x18
 00000016  2100      MOV         R1,#0x0
ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 6   

 00000018  F7FF      BL          send_to_lcd?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          send_to_lcd?T  ; T=0x0001  (2)
   68:     datatosend = ((cmd) & 0x0F);
 0000001C  1C28      MOV         R0,R5 ; cmd
 0000001E  0604      LSL         R4,R0,#0x18 ; cmd
 00000020  0E24      LSR         R4,R4,#0x18
 00000022  200F      MOV         R0,#0xF
 00000024  4004      AND         R4,R0
   69:     send_to_lcd(datatosend,0); 
 00000026  1C20      MOV         R0,R4 ; datatosend
 00000028  0600      LSL         R0,R0,#0x18 ; datatosend
 0000002A  0E00      LSR         R0,R0,#0x18
 0000002C  2100      MOV         R1,#0x0
 0000002E  F7FF      BL          send_to_lcd?T  ; T=0x0001  (1)
 00000030  FFE7      BL          send_to_lcd?T  ; T=0x0001  (2)
 00000032            ; SCOPE-END
   70: }
 00000032  BC30      POP         {R4-R5}
 00000034  BC08      POP         {R3}
 00000036  4718      BX          R3
 00000038          ENDP ; 'lcd_send_cmd?T'


*** CODE SEGMENT '?PR?lcd_send_data?T?LCD':
   73: void lcd_send_data(unsigned char data)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; data
 00000004  ---- Variable 'data' assigned to Register 'R5' ----
   74: {
 00000004            ; SCOPE-START
   78:     datatosend = ((data >>4) & 0x0F);
 00000004  1C28      MOV         R0,R5 ; data
 00000006  0604      LSL         R4,R0,#0x18 ; data
 00000008  0E24      LSR         R4,R4,#0x18
 0000000A  0924      LSR         R4,R4,#0x4
 0000000C  200F      MOV         R0,#0xF
 0000000E  4004      AND         R4,R0
 00000010  ---- Variable 'datatosend' assigned to Register 'R4' ----
   79:     send_to_lcd(datatosend,1);
 00000010  1C20      MOV         R0,R4 ; datatosend
 00000012  0600      LSL         R0,R0,#0x18 ; datatosend
 00000014  0E00      LSR         R0,R0,#0x18
 00000016  2101      MOV         R1,#0x1
 00000018  F7FF      BL          send_to_lcd?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          send_to_lcd?T  ; T=0x0001  (2)
   82:     datatosend = data & (0x0F);
 0000001C  1C28      MOV         R0,R5 ; data
 0000001E  0604      LSL         R4,R0,#0x18 ; data
 00000020  0E24      LSR         R4,R4,#0x18
 00000022  200F      MOV         R0,#0xF
 00000024  4004      AND         R4,R0
   83:     send_to_lcd(datatosend,1);
 00000026  1C20      MOV         R0,R4 ; datatosend
 00000028  0600      LSL         R0,R0,#0x18 ; datatosend
 0000002A  0E00      LSR         R0,R0,#0x18
 0000002C  2101      MOV         R1,#0x1
 0000002E  F7FF      BL          send_to_lcd?T  ; T=0x0001  (1)
 00000030  FFE7      BL          send_to_lcd?T  ; T=0x0001  (2)
 00000032            ; SCOPE-END
   85: }
 00000032  BC30      POP         {R4-R5}
 00000034  BC08      POP         {R3}
 00000036  4718      BX          R3
 00000038          ENDP ; 'lcd_send_data?T'


*** CODE SEGMENT '?PR?lcd_put_cur?T?LCD':
   93: void lcd_put_cur(int row, int col)
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable 'col' assigned to Register 'R1' ----
ARM COMPILER V2.40a,  LCD                                                                  09/09/23  07:51:50  PAGE 7   

 00000002  1C02      MOV         R2,R0 ; row
 00000004  ---- Variable 'row' assigned to Register 'R2' ----
   95:     switch (row)
 00000004  1C10      MOV         R0,R2 ; row
 00000006  2801      CMP         R0,#0x1 ; row
 00000008  D004      BEQ         L_15  ; T=0x00000014
 0000000A  2800      CMP         R0,#0x0 ; row
 0000000C  D104      BNE         L_13  ; T=0x00000018
   97:         case 0:
 0000000E          L_14:
   98:             col |= 0x80;
 0000000E  2080      MOV         R0,#0x80
 00000010  4301      ORR         R1,R0
   99:             break;
 00000012  E001      B           L_13  ; T=0x00000018
  100:         case 1:
 00000014          L_15:
  101:             col |= 0xC0;
 00000014  20C0      MOV         R0,#0xC0
 00000016  4301      ORR         R1,R0
  103:     }
 00000018          L_13:
  105:     lcd_send_cmd (col);
 00000018  1C08      MOV         R0,R1 ; col
 0000001A  F7FF      BL          lcd_send_cmd?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          lcd_send_cmd?T  ; T=0x0001  (2)
  106: }
 0000001E  BC08      POP         {R3}
 00000020  4718      BX          R3
 00000022          ENDP ; 'lcd_put_cur?T'


*** CODE SEGMENT '?PR?lcd_send_string?T?LCD':
  110: void lcd_send_string (char *str)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; str
 00000004  ---- Variable 'str' assigned to Register 'R4' ----
  112:     while (*str) lcd_send_data (*str++);
 00000004  E004      B           L_16  ; T=0x00000010
 00000006          L_18:
 00000006  1C20      MOV         R0,R4 ; str
 00000008  3401      ADD         R4,#0x1
 0000000A  7800      LDRB        R0,[R0,#0x0] ; str
 0000000C  F7FF      BL          lcd_send_data?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          lcd_send_data?T  ; T=0x0001  (2)
 00000010          L_16:
 00000010  1C20      MOV         R0,R4 ; str
 00000012  7800      LDRB        R0,[R0,#0x0] ; str
 00000014  2800      CMP         R0,#0x0
 00000016  D1F6      BNE         L_18  ; T=0x00000006
  113: }
 00000018  BC10      POP         {R4}
 0000001A  BC08      POP         {R3}
 0000001C  4718      BX          R3
 0000001E          ENDP ; 'lcd_send_string?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
